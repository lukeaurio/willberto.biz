name: 'Setup OpenTofu and Lint'
description: 'A composite action to setup and run OpenTofu commands'

inputs:
  tofu_directory:
    description: 'The directory where OpenTofu files are located'
    required: true
    default: '.'
  # Note: Sensitive values should be passed via environment variables, not inputs
  # bucket_name is accessed via env.BUCKET_NAME instead

outputs:
  init_stdout:
    description: 'The result of the OpenTofu init command'
    value: ${{ steps.init.outputs.stdout }}
  init_stderr:
    description: 'The stderr of the OpenTofu init command'
    value: ${{ steps.init.outputs.stderr }}
  validate_stdout:
    description: 'The result of the OpenTofu validate command'
    value: ${{ steps.validate.outputs.stdout }}
  validate_stderr:
    description: 'The stderr of the OpenTofu validate command'
    value: ${{ steps.validate.outputs.stderr }}
  plan_stdout:
    description: 'The result of the OpenTofu plan command'
    value: ${{ steps.plan.outputs.stdout }}
  plan_stderr:
    description: 'The stderr of the OpenTofu plan command'
    value: ${{ steps.plan.outputs.stderr }}

runs:
  using: 'composite'
  steps:
    - name: Set Up Opentofu
      uses: opentofu/setup-opentofu@v1

    - name: OpenTofu Init
      id: init
      working-directory: ${{ inputs.tofu_directory }}
      run: tofu init -backend-config="bucket=${{ env.tfstates_bucket }}" -backend-config="prefix=${{ env.tfstates_prefix }}" -input=false -no-color
      shell: bash
      continue-on-error: true # This allows the workflow to continue even if init fails

    - name: OpenTofu Validate
      id: validate
      working-directory: ${{ inputs.tofu_directory }}
      run: tofu validate -no-color
      shell: bash
      continue-on-error: true

    - name: OpenTofu Plan
      working-directory: ${{ inputs.tofu_directory }}
      id: plan
      run: tofu plan -input=false -lock=false -no-color
      shell: bash
      continue-on-error: true
    
    - name: Potential Failure        
      if: ${{ steps.init.outputs.stderr || steps.validate.outputs.stderr || steps.plan.outputs.stderr }}
      run: |
        echo "Errors found in Validation Or Plan. Failing the job."
        echo ${{ steps.validate.outputs.stderr || steps.plan.outputs.stderr }}
        exit 1
      shell: bash